@using Squill.Data;

    <MudMenu StartIcon="@((m_lastType ?? ElementType).GetIcon())" Label="@($"{Label} {m_lastName}")" @bind-Value=Value Variant="Variant.Outlined" Style="flex-grow:1;">
        @foreach (var match in Session.ElementMeta)
        {
            var type = Type.GetType(match.Type);
            if (!ElementType.IsAssignableFrom(type))
            {
                continue;
            }
            if (Filter != null && !Filter.Invoke(match))
            {
                continue;
            }
            if (m_explicitTypeFilter != null && !m_explicitTypeFilter.IsAssignableFrom(type))
            {
                continue;
            }
            <MudMenuItem OnClick="async () => await SetItem(match)">@match.Name</MudMenuItem>
        }
    </MudMenu>
<MudIconButton Icon="@Icons.Material.Filled.LinkOff" Size="Size.Small" OnClick="() => TabManager.AddTab(Session.GetMetaData(Value))" Disabled="Value == default" />
<MudMenu StartIcon="@(m_explicitTypeFilter != null ? m_explicitTypeFilter.GetIcon() : @Icons.Material.Filled.FilterList)" >
        @{
            var subTypes = ElementType.GetTypesImplementing();
            if (subTypes.Any())
            {
                foreach (var type in subTypes)
                {
                    var t = type;
                    <MudMenuItem OnClick="() => m_explicitTypeFilter = t">@type.GetName()</MudMenuItem>
                }
            }
        }
    </MudMenu>

@code {
    [Parameter]
    public Type ElementType { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public Guid Value { get; set; }

    [Parameter]
    public EventCallback<Guid> ValueChanged { get; set; }

    [Parameter]
    public Func<ElementMetaData, bool> Filter { get; set; }

    [CascadingParameter]
    public ProjectSession Session { get; set; }

    [CascadingParameter]
    public Squill.Components.TabManager TabManager { get; set; }

    private string m_lastName;
    private Type m_lastType;
    private Type m_explicitTypeFilter;

    private Converter<ElementMetaData> m_converter = new Converter<ElementMetaData> { SetFunc = m => m?.Name };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var meta = Session.GetMetaData(Value);
        if (meta != null)
        {
            m_lastName = meta.Name;
            m_lastType = Type.GetType(meta.Type);
        }
    }

    private async Task SetItem(ElementMetaData metaData)
    {
        m_lastName = metaData?.Name;
        Value = Guid.Parse(metaData.Guid);
        await ValueChanged.InvokeAsync(Value);
    }
}
