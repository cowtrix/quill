@using Squill.Components.Layout
@using Squill.Data;


@{
    var diff = Session.GetGitDiff();
    if (diff != null)
    {
        <div class="diff-container">
            <SqTooltip>
                <ChildContent>
                    @if (!m_isSyncing)
                    {
                        <SqIconButton Icon="node-plus-fill" OnClick="Sync" AdditionalClasses="sync" />
                    }
                    else
                    {
                        <SqIconButton Icon="arrow-clockwise" AdditionalClasses="sync spin" />
                    }
                </ChildContent>
                <TooltipContent>
                    Sync Changes
                </TooltipContent>
            </SqTooltip>
            <SqTooltip>
                <ChildContent>
                    <div class="git-diff-node add">
                        <SqIcon IconName="plus-lg" />
                        <span>@diff.Added.Count()</span>
                    </div>
                </ChildContent>
                <TooltipContent>
                    Added
                </TooltipContent>
            </SqTooltip>
            <SqTooltip>
                <ChildContent>
                    <div class="git-diff-node del">
                        <SqIcon IconName="dash-lg" /> <span>@diff.Deleted.Count()</span>
                    </div>
                </ChildContent>
                <TooltipContent>
                    Deleted
                </TooltipContent>
            </SqTooltip>
            <SqTooltip>
                <ChildContent>
                    <div class="git-diff-node mod">
                        <SqIcon IconName="pencil-fill" /> <span>@diff.Modified.Count()</span>
                    </div>
                </ChildContent>
                <TooltipContent>
                    Modified
                </TooltipContent>
            </SqTooltip>
        </div>
    }
}

@code {
    [Parameter]
    public ProjectSession Session { get; set; }

    private bool m_isSyncing;

    private async Task Sync()
    {
        if (m_isSyncing)
        {
            return;
        }
        new Task(() =>
        {
            m_isSyncing = true;
            Session.Commit("", true);
            m_isSyncing = false;
            InvokeAsync(StateHasChanged);
        }).Start();
        StateHasChanged();
    }
}
