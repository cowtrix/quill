@using Squill.Components.Editors
@using Squill.Components.Layout
@using Squill.Data;


@{
    var diff = Session.GetGitDiff();
    if (diff != null)
    {
        <div class="diff-container">
            <SqTooltip>
                <ChildContent>
                    @if (!m_isSyncing)
                    {
                        <SqIconButton Icon="node-plus-fill" OnClick="ShowCommitDialogue" AdditionalClasses="sync" />
                    }
                    else
                    {
                        <SqIconButton Icon="arrow-clockwise" AdditionalClasses="sync spin" />
                    }
                </ChildContent>
                <TooltipContent>
                    Sync Changes
                </TooltipContent>
            </SqTooltip>
            <SqTooltip>
                <ChildContent>
                    <div class="git-diff-node add">
                        <SqIcon IconName="plus-lg" />
                        <span>@diff.Added.Count()</span>
                    </div>
                </ChildContent>
                <TooltipContent>
                    Added
                </TooltipContent>
            </SqTooltip>
            <SqTooltip>
                <ChildContent>
                    <div class="git-diff-node del">
                        <SqIcon IconName="dash-lg" /> <span>@diff.Deleted.Count()</span>
                    </div>
                </ChildContent>
                <TooltipContent>
                    Deleted
                </TooltipContent>
            </SqTooltip>
            <SqTooltip>
                <ChildContent>
                    <div class="git-diff-node mod">
                        <SqIcon IconName="pencil-fill" /> <span>@diff.Modified.Count()</span>
                    </div>
                </ChildContent>
                <TooltipContent>
                    Modified
                </TooltipContent>
            </SqTooltip>
        </div>
    }
}

@if (m_commitDialogueOpen)
{
    <SqModal OnDismiss="() => m_commitDialogueOpen = false" OnSubmit="Sync">
        <MarkdownWrapper @bind-Value="@m_commitMessage" Placeholder="Commit Message" Minimal=true />
    </SqModal>
}

@code {
    [Parameter]
    public ProjectSession Session { get; set; }

    private string m_commitMessage;
    private bool m_commitDialogueOpen;
    private bool m_isSyncing;

    private async Task ShowCommitDialogue()
    {
        m_commitDialogueOpen = true;
        StateHasChanged();
    }

    private async Task Sync()
    {
        m_commitDialogueOpen = false;
        if (m_isSyncing)
        {
            StateHasChanged();
            return;
        }
        new Task(() =>
        {
            m_isSyncing = true;
            Session.Commit(m_commitMessage, true);
            m_isSyncing = false;
            m_commitMessage = null;
            InvokeAsync(StateHasChanged);
        }).Start();
        StateHasChanged();
    }
}
