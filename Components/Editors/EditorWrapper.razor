@using Squill.Components.Layout;
@using Squill.Data;
@using Squill.Data.ElementComponents;
@using Squill.Data.Elements;
@using Squill.Data.Utility;
@{
    var meta = Session.GetMetaData(Element.Guid);
}

<SqToolbar>
    <SqMenu Label="File" Placement="SqMenu.eMenuPlacement.BottomRight" AdditionalClasses="sq-toolbar-menu-item">
        <SqMenuButton Icon="save" Label="Save" OnClick="async () => await Session.UpdateElement(Element)" />
        @Toolbar
    </SqMenu>

</SqToolbar>

<div class="sq-editor-wrapper">
    <CascadingValue Value="Element">
        <CascadingValue Value="Session">
            <CascadingValue Value="meta">
                <EditForm EditContext="m_editContext">
                    @ChildContent
                    @{
                        var componentsCanAdd = Element.GetApplicableComponents();
                        <SqMenu Icon="plus-lg" Label="Add Component" Placement="SqMenu.eMenuPlacement.TopRight" Disabled="@(!componentsCanAdd.Any())">
                            @foreach (var comp in componentsCanAdd)
                            {
                                var t = comp;
                                <SqMenuButton Label="@comp.GetName()" Icon="@comp.GetIcon()" OnClick="() => Element.AddComponent(t)" />
                            }
                        </SqMenu>
                    }
                    @if (Element.ShouldTag)
                    {
                        <TagDisplay Meta="meta" Session="Session" />
                    }
                </EditForm>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</div>

@code {
    private string m_currentTab;

    public void ToggleTab(string tabName)
    {
        if (m_currentTab == tabName)
        {
            m_currentTab = null;
        }
        else
        {
            m_currentTab = tabName;
        }
    }

    [Parameter]
    public ProjectSession Session { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public RenderFragment Toolbar => CurrentEditor?.Toolbar;

    [Parameter]
    public IElement Element
    {
        get => m_element;
        set
        {
            if (Element?.Guid == value?.Guid)
            {
                return;
            }
            m_element = value;
            m_editContext = new EditContext(m_element);
            InvokeAsync(StateHasChanged);
        }
    }
    private IElement m_element;

    public EditorBase CurrentEditor { get; set; }

    private EditContext m_editContext;

    protected override void OnInitialized()
    {
        m_editContext = new EditContext(Element);
    }
}
