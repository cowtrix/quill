@using Squill.Components.Layout;
@using Squill.Data;
@using Squill.Data.ElementComponents;
@using Squill.Data.Elements;
@{
    var meta = Session.GetMetaData(Element.Guid);
}

@*<MudPaper Elevation="15" Style="height: 1.5rem;" Outlined=true Square=true>
    <MudToolBar DisableGutters=true Style="width:100%;height: 1.5rem;overflow:hidden;">
        <MudStack Row="true" Spacing=0 Style="width:100%;align-items:center;">
            <MudMenu Label="File" StartIcon="@Icons.Material.Filled.FileCopy" Size="Size.Small" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomLeft">
                <MudMenuItem OnClick="async () => await Session.UpdateElement(Element)">Save</MudMenuItem>
            </MudMenu>
            <MudMenu Label="View" StartIcon="@Icons.Material.Filled.FileCopy" Size="Size.Small" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomLeft">
                <MudMenuItem OnClick="@(() => ToggleTab("Scratchpad"))">Scratchpad</MudMenuItem>
            </MudMenu>
            @Toolbar
        </MudStack>
    </MudToolBar>
</MudPaper>

<MudForm @ref=Form.Value Class="form-container">
    <CascadingValue Value="TabManager">
        <CascadingValue Value="Element">
            <CascadingValue Value="Session">
                <CascadingValue Value="meta">
                    @if (m_currentTab == "Scratchpad")
                    {
                        <MarkdownEditor @bind-Value=Element.ScratchPad />
                    }
                    else
                    {
                        @ChildContent
                    }
                    @if (Element != null)
                    {
                        var componentsCanAdd = Element.GetApplicableComponents();
                        <MudMenu Size="Size.Small" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Add" Disabled="!componentsCanAdd.Any()">
                            @foreach (var subType in componentsCanAdd)
                            {
                                <MudMenuItem OnClick="() => Element.AddComponent(subType)">@subType.GetName()</MudMenuItem>
                            }
                        </MudMenu>
                    }
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</MudForm>*@

<SqToolbar>
    <SqMenu Label="File" Placement="SqMenu.eMenuPlacement.BottomRight" AdditionalClasses="sq-toolbar-menu-item">
        <SqMenuButton Icon="save" Label="Save" OnClick="async () => await Session.UpdateElement(Element)" />
    </SqMenu>
</SqToolbar>

<div class="sq-editor-wrapper">
    <CascadingValue Value="Element">
        <CascadingValue Value="Session">
            <CascadingValue Value="meta">
                @ChildContent
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</div>

@code {
    private string m_currentTab;

    public void ToggleTab(string tabName)
    {
        if (m_currentTab == tabName)
        {
            m_currentTab = null;
        }
        else
        {
            m_currentTab = tabName;
        }
    }

    [Parameter]
    public ProjectSession Session { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public RenderFragment Toolbar => CurrentEditor?.Toolbar;

    [Parameter]
    public IElement Element { get; set; }

    public EditorBase CurrentEditor { get; set; }
}
