@using Squill.Components.Layout
@using Squill.Data.ElementComponents;
@using Squill.Data.Elements;
@using Squill.Data;
@using Squill.Shared;
@using Squill.Data.Elements;
@using Squill.Data.ElementComponents;

@inherits GenericEditorBase<Timeline>

<div class="sq-editor timeline-editor">
    @for (var i = 0; i < Target.Events.Count; i++)
    {
        var ev = Target.Events[i];
        var counter = i;
        var componentsCanAdd = ev.GetApplicableComponents();
        <div class="sq-card">
            <div class="sq-card-header">
                <SqInputText Label="Title" @bind-Value=ev.Title />
                @foreach (var component in ev.Components)
                {
                    <div class="component-wrapper">
                        @component.GetEditor(Session, ev)
                        <div class="component-actions">
                            <SqIconButton Icon="trash-fill" OnClick="() => RemoveComponent(ev, component)" />
                        </div>
                    </div>
                }
            </div>
            <div class="sq-card-actions">
                <SqIconButton Icon="trash-fill" OnClick="() => Target.Events.Remove(ev)" />
                <SqIconButton Icon="chevron-up" OnClick="() => Target.SetIndex(ev, counter - 1)" Disabled="counter <= 0" />
                <SqIconButton Icon="chevron-down" OnClick="() => Target.SetIndex(ev, counter + 1)" Disabled="counter >= Target.Events.Count - 1" />
                <SqMenu Icon="plus-lg" Disabled="!componentsCanAdd.Any()">
                    @foreach (var subType in componentsCanAdd)
                    {
                        <MudMenuItem OnClick="() => AddComponent(ev, subType)">@subType.GetName()</MudMenuItem>
                    }
                </SqMenu>
            </div>
        </div>
    }
    <SqIconButton OnClick="() => Target.Events.Add(new Event())" />

</div>


@code {
    private void AddComponent(Event ev, Type t)
    {
        ev.AddComponent(t);
        StateHasChanged();
    }

    private void RemoveComponent(Event ev, ElementComponent component)
    {
        ev.Components.Remove(component);
        StateHasChanged();
    }
}
