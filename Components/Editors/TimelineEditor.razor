@using Squill.Data;
@using Squill.Shared;
@inherits GenericEditorBase<Timeline>

<MudPaper Outlined=true Square=true>
    <MudStack Class="border-collapse p-relative" Justify="Justify.Center">
        <div class="line"></div>
        @for (var i = 0; i < Target.Events.Count; i++)
        {
            var ev = Target.Events[i];
            var counter = i;
            var componentsCanAdd = typeof(EventComponent).GetTypesImplementing()
            .Where(t => !ev.Components.Any(c => c.GetType() == t));
            <MudCard Outlined=true Style="min-width:50%;max-width:30rem;align-self:center;z-index:1;" Elevation="10">
                <MudCardContent>
                    <MudTextField Label="Title" @bind-Value=ev.Title />
                    @foreach (var component in ev.Components)
                    {
                        <div class="component-wrapper">
                            @component.GetEditor()
                            <div class="component-actions">
                                <MudIconButton Size="Size.Small" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Delete" OnClick="() => RemoveComponent(ev, component)" />
                            </div>
                        </div>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudStack Row=true Spacing="1">
                        <MudIconButton Size="Size.Small" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Delete" OnClick="() => Target.Events.Remove(ev)" />
                        <MudIconButton Size="Size.Small" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.KeyboardArrowUp" OnClick="() => Target.SetIndex(ev, counter - 1)" Disabled="counter <= 0" />
                        <MudIconButton Size="Size.Small" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.KeyboardArrowDown" OnClick="() => Target.SetIndex(ev, counter + 1)" Disabled="counter >= Target.Events.Count - 1" />
                        <MudMenu Size="Size.Small" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Add" Disabled="!componentsCanAdd.Any()">
                            @foreach (var subType in componentsCanAdd)
                            {
                                <MudMenuItem OnClick="() => AddComponent(ev, subType)">@subType.GetName()</MudMenuItem>
                            }
                        </MudMenu>
                    </MudStack>
                </MudCardActions>
            </MudCard>
        }
        <MudButton OnClick="() => Target.Events.Add(new Event())" Variant="Variant.Outlined" Style="min-width:50%;max-width:30rem;z-index:1;align-self:center;">
            <MudIcon Icon="@Icons.Material.Filled.Add" />
        </MudButton>
    </MudStack>
</MudPaper>


@code {
    private void AddComponent(Event ev, Type t)
    {
        var newComponent = Activator.CreateInstance(t) as EventComponent;
        if (newComponent == null)
        {
            throw new Exception($"Failed to create type {t}");
        }
        ev.Components.Add(newComponent);
        StateHasChanged();
    }

    private void RemoveComponent(Event ev, EventComponent component)
    {
        ev.Components.Remove(component);
        StateHasChanged();
    }
}
