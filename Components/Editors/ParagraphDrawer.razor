@inject IJSRuntime JS

<div class="grow-wrap text">
    <InputTextArea @onkeydown="@(async (e) => await HandleInput(e))" @ref=Input class="markdown-textfield" @bind-Value=Value @oninput="Update" />
    <div class="text">@((MarkupString)WordStyle(string.IsNullOrEmpty(Value) ? " " : Value + " "))</div>
</div>

@code {

    [CascadingParameter]
    public MarkdownEditor Editor { get; set; }

    [Parameter]
    public string Value { get => __value.Trim(); set => __value = value?.Trim() ?? string.Empty; }
    private string __value;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public int Index { get; set; }

    [Parameter]
    public bool Focus { get; set; }

    [Parameter]
    public EventCallback<ParagraphDrawer> OnEnterPressed { get; set; }

    [Parameter]
    public EventCallback<ParagraphDrawer> OnBackspaceDelete { get; set; }

    [Parameter]
    public Func<string, string> WordStyle { get; set; }

    public InputTextArea Input { get; set; }


    private void Update(ChangeEventArgs args)
    {
        Value = (args.Value as string).Trim();
        InvokeAsync(async () => await ValueChanged.InvokeAsync(Value));
        StateHasChanged();
    }

    public async Task HandleInput(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await OnEnterPressed.InvokeAsync(this);
            StateHasChanged();
        }
        if (e.Code == "Backspace" || e.Code == "Delete")
        {
            await OnBackspaceDelete.InvokeAsync(this);
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Focus)
        {
            await Input.Element.Value.FocusAsync();
        }
    }
}
