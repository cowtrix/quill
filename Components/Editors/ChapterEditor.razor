@inherits GenericEditorBase<Chapter>

@using Squill.Data;
@using System.Text;
@using Squill.Data.Elements;

<MudPaper Elevation="15" Outlined=true Square=true>
    @if (CurrentTab == eTab.Edit)
    {
        <MarkdownWrapper @bind-Value=Target.Content />
    }
    else if (CurrentTab == eTab.Breakdown)
    {
        if (Breakdown == null || Target.Content != Breakdown.Content)
        {
            Breakdown = new ChapterBreakdown(Session, Target.Content);
        }
        <PlotlyChart @bind-Config="Breakdown.Config" @bind-Layout="Breakdown.Layout" Data="Breakdown.Data" @ref="Breakdown.Chart" />
    }
</MudPaper>

@code {
    public enum eTab
    {
        Edit,
        Breakdown,
    }

    public eTab CurrentTab { get; set; }

    public class ChapterBreakdown : GraphProvider
    {
        private Dictionary<ElementMetaData, int> m_entityCount;
        private Dictionary<string, int> m_wordCount;

        public string Content { get; private set; }

        public override IList<ITrace> Data => new List<ITrace>
        {
            new Bar
            {
                Y = m_wordCount.Where(w => w.Value > 5).Select(kvp => kvp.Key).Cast<object>().ToList(),
                X = m_wordCount.Where(w => w.Value > 5).Select(kvp => kvp.Value).Cast<object>().ToList(),
                Name = "Words",
                Orientation = Plotly.Blazor.Traces.BarLib.OrientationEnum.H,
            },
            new Bar
            {
                Y = m_entityCount.Keys.Select(k => k.Name).Cast<object>().ToList(),
                X = m_entityCount.Values.Cast<object>().ToList(),
                Name = "Elements",
                Orientation = Plotly.Blazor.Traces.BarLib.OrientationEnum.H,
            },
        };

        protected override int Height => m_wordCount.Count * 2;

        public ChapterBreakdown(ProjectSession session, string value) : base()
        {
            Content = value;
            m_entityCount = new Dictionary<ElementMetaData, int>();
            m_wordCount = new Dictionary<string, int>();
            var w = value.Split(' ');
            foreach (var word in w)
            {
                var stripWord = word
                .Replace(".", "")
                .Replace("\"", "")
                .Replace("!", "")
                .Replace("?", "")
                .Replace("'s", "");

                var element = session.ElementMeta.FirstOrDefault(m => m.Name == stripWord);
                if (element != null && element.ShouldTag())
                {
                    if (!m_entityCount.TryGetValue(element, out var count))
                    {
                        count = 1;
                    }
                    else
                    {
                        count++;
                    }
                    m_entityCount[element] = count;
                }

                if (element == null && stripWord.Length > 3)
                {
                    if (!m_wordCount.TryGetValue(stripWord, out var count))
                    {
                        count = 1;
                    }
                    else
                    {
                        count++;
                    }
                    m_wordCount[stripWord] = count;
                }
            }
            m_entityCount = m_entityCount.OrderBy(kvp => kvp.Value)
                .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            m_wordCount = m_wordCount.OrderBy(kvp => kvp.Value)
                .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            Layout.Height = Height;
        }
    }

    public ChapterBreakdown Breakdown { get; set; }

    public override RenderFragment Toolbar => __builder =>
    {
        <MudButton StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" Style="width: 5rem" OnClick="() => CurrentTab = eTab.Edit">Edit</MudButton>
        <MudDivider Vertical=true Style="margin: 0;height: 1.5rem;border-color:white;" />
        <MudButton StartIcon="@Icons.Material.Filled.DataArray" Size="Size.Small" Style="width: 8rem" OnClick="() => CurrentTab = eTab.Breakdown">Breakdown</MudButton>
        <MudDivider Vertical=true Style="margin: 0;height: 1.5rem;border-color:white;" />
        <MudSpacer />
        <MudTooltip Arrow=true RootStyle="display:flex;justify-content:center;">
            <ChildContent>
                <MudIcon Icon="@Icons.Material.Outlined.Numbers" Size="Size.Small" />WC: @Target.WordCount
            </ChildContent>
            <TooltipContent>
                Word Count
            </TooltipContent>
        </MudTooltip>
        <MudDivider Vertical=true Style="margin: 0 .5rem 0 .5rem;height: 1.5rem;" />
        @if (!Guid.TryParse(Target.Owner, out var ownerGuid))
        {
            <span class="toolbar-label">Chapter not owned by any manuscript.</span>
        }
        else
        {
            var ownerMeta = Session.GetMetaData(ownerGuid);
            if (ownerMeta == null)
            {
                <span class="toolbar-label">Bad chapter link, please reestablish.</span>
            }
            else
            {
                <span class="toolbar-label">Chapter of <ElementLink Element="ownerGuid" Session="Session" TabManager="TabManager" /></span>
            }
        }
        <MudDivider Vertical=true Style="margin: 0 .5rem 0 .5rem;height: 1.5rem;" />
    };
}
