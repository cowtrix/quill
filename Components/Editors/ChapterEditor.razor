@inherits EditorBase<Chapter>

@using Squill.Data;
@using System.Text;

<MudItem>
    <MudPaper Elevation="25">
        <MudToolBar DisableGutters=true Style="height: 2.5rem; padding: 0 .5rem 0 .5rem;">
            <MudIcon Icon="@Icons.Material.Outlined.Numbers" /> Word Count: @Element.WordCount
            <MudDivider Vertical=true Style="margin: 0 .5rem 0 .5rem;" />
            @if (!Guid.TryParse(Element.Owner, out var ownerGuid))
            {
                <span class="toolbar-label">Chapter not owned by any manuscript.</span>
            }
            else
            {
                var ownerMeta = Session.GetMetaData(ownerGuid);
                if (ownerMeta == null)
                {
                    <span class="toolbar-label">Bad chapter link, please reestablish.</span>
                }
                else
                {
                    <span class="toolbar-label">Chapter of @ownerMeta.Name</span>
                }
            }
        </MudToolBar>
    </MudPaper>
    

    <EditForm EditContext="m_context">
        <MarkdownEditor @bind-Value=Element.Content WordStyle="InsertTags" />
    </EditForm>
</MudItem>

@code {
    private EditContext m_context;

    protected override void OnInitialized()
    {
        m_context = new EditContext(Element);
    }

    private string InsertTags(string rawInput)
    {
        var sb = new StringBuilder();
        var w = rawInput.Split(' ');
        foreach(var word in w)
        {
            var element = Session.ElementMeta.FirstOrDefault(m => m.Name == word);
            if(element != null)
            {
                sb.Append("<span class=\"tag\">");
            }
            sb.Append(word);
            if (element != null)
            {
                sb.Append("</span>");
            }
            sb.Append(' ');
        }
        return sb.ToString();
    }
}
