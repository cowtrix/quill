@inherits GenericEditorBase<Chapter>

@using Squill.Data;
@using System.Text;

<MudPaper Elevation="15" Outlined=true Square=true >
    @if (m_showElementBreakdown)
    {
        <MudPaper Square=true>
            @foreach (var ele in m_entityCount)
            {
                <ElementLink Element="Guid.Parse(ele.Key.Guid)" Session="Session" TabManager="TabManager">
                    <span class="count-pill">@ele.Value</span>
                </ElementLink>
            }
        </MudPaper>
    }
    <EditForm EditContext="m_context">
        @{
            m_entityCount.Clear();
        }
        <MarkdownEditor @bind-Value=Target.Content WordStyle="InsertTags" />
    </EditForm>
</MudPaper>

@code {
    private EditContext m_context;
    private bool m_showElementBreakdown;
    private Dictionary<ElementMetaData, int> m_entityCount = new Dictionary<ElementMetaData, int>();

    protected override void OnInitialized()
    {
        m_context = new EditContext(Element);
    }

    private string InsertTags(string rawInput)
    {
        var sb = new StringBuilder();
        var w = rawInput.Split(' ');
        foreach (var word in w)
        {
            var stripWord = word
                .Replace(".", "")
                .Replace("\"", "")
                .Replace("!", "")
                .Replace("?", "");
            var element = Session.ElementMeta.FirstOrDefault(m => m.Name == stripWord);
            if (element != null)
            {
                var color = Type.GetType(element.Type).GetColor().ToString();
                if (element.Attributes.TryGetValue("color", out var colVal))
                {
                    color = colVal;
                }
                sb.Append($"<span class=\"tag\" style=\"background-color:{color};outline: 5px solid {color};\">");
                if (!m_entityCount.TryGetValue(element, out var count))
                {
                    count = 1;
                }
                else
                {
                    count++;
                }
                m_entityCount[element] = count;
            }
            sb.Append(word);
            if (element != null)
            {
                sb.Append("</span>");
            }
            sb.Append(' ');
        }
        return sb.ToString();
    }

    public override RenderFragment Toolbar => __builder =>
    {
        <MudToggleIconButton Icon="@Icons.Material.Filled.DataArray" Size="Size.Small" @bind-Toggled=m_showElementBreakdown ToggledIcon="@Icons.Material.Filled.DataArray" Style="width: 2rem" />
        <MudSpacer />
        <MudTooltip Arrow=true RootStyle="display:flex;justify-content:center;">
            <ChildContent>
                <MudIcon Icon="@Icons.Material.Outlined.Numbers" Size="Size.Small" />WC: @Target.WordCount
            </ChildContent>
            <TooltipContent>
                Word Count
            </TooltipContent>
        </MudTooltip>
        <MudDivider Vertical=true Style="margin: 0 .5rem 0 .5rem;height: 1.5rem;" />
        @if (!Guid.TryParse(Target.Owner, out var ownerGuid))
        {
            <span class="toolbar-label">Chapter not owned by any manuscript.</span>
        }
        else
        {
            var ownerMeta = Session.GetMetaData(ownerGuid);
            if (ownerMeta == null)
            {
                <span class="toolbar-label">Bad chapter link, please reestablish.</span>
            }
            else
            {
                <span class="toolbar-label">Chapter of <ElementLink Element="ownerGuid" Session="Session" TabManager="TabManager" /></span>
            }
        }
        <MudDivider Vertical=true Style="margin: 0 .5rem 0 .5rem;height: 1.5rem;" />
    };
}
