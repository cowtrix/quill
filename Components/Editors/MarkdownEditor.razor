
<div class="textarea-container">
    <div class="page">
        @for (var i = 0; i < m_paragraphs.Count; i++)
        {
            var paragraph = m_paragraphs[i];
            <ParagraphDrawer Value=@paragraph.Content WordStyle="WordStyle" ValueChanged="(s) => Update(paragraph, s)" Index=i OnEnterPressed=Enter OnBackspaceDelete=Backspace Focus=paragraph.TakeFocus />
            paragraph.TakeFocus = false;
        }
    </div>
</div>

@code {
    public class Paragraph
    {
        public bool TakeFocus { get; set; }
        public string Content { get; set; }
        public override string ToString() => Content;
        public Paragraph(string content, bool takeFocus = false)
        {
            Content = content.Trim();
            TakeFocus = takeFocus;
        }
    }

    [Parameter]
    public new string Value
    {
        get
        {
            return string.Join(Environment.NewLine, m_paragraphs?.Select(p => p.Content));
        }
        set
        {
            m_paragraphs = value?.Split('\n', StringSplitOptions.TrimEntries)
                .Select(p => new Paragraph(p)).ToList();
        }
    }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public Func<string, string> WordStyle { get; set; }

    private string m_lastValue { get; set; }
    private Task m_autosaveThread { get; set; }
    private List<Paragraph> m_paragraphs;

    protected override void OnInitialized()
    {
        m_lastValue = Value;
        m_autosaveThread = new Task(async () => await AutoSave());
        m_autosaveThread.Start();
    }

    private void Update(Paragraph p, string val)
    {
        p.Content = val;
    }

    public void Enter(ParagraphDrawer paragraph)
    {
        m_paragraphs[paragraph.Index].Content = m_paragraphs[paragraph.Index].Content?.Trim() ?? string.Empty;
        m_paragraphs.Insert(paragraph.Index + 1, new Paragraph(string.Empty, true));
        StateHasChanged();
        InvokeAsync(async () => await ValueChanged.InvokeAsync(Value));
    }

    public void Backspace(ParagraphDrawer paragraph)
    {
        if (string.IsNullOrEmpty(paragraph.Value))
        {
            m_paragraphs.RemoveAt(paragraph.Index);
            var focus = m_paragraphs.ElementAtOrDefault(paragraph.Index - 1);
            if (focus != null)
            {
                focus.TakeFocus = true;
            }
            StateHasChanged();
            InvokeAsync(async () => await ValueChanged.InvokeAsync(Value));
        }
    }

    private async Task AutoSave()
    {
        while (true)
        {
            await Task.Delay(TimeSpan.FromSeconds(10));
            if (m_lastValue == Value)
            {
                continue;
            }
            await InvokeAsync(async () => await ValueChanged.InvokeAsync(Value));
            m_lastValue = Value;
        }
    }
}
