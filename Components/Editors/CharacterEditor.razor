@inherits GenericEditorBase<Character>

@using MudBlazor.Utilities;
@using Squill.Data;

@{
    if (Target != null && Target.Avatar == null)
    {
        Target.Avatar = new CharacterAvatar();
    }
}

<MudPaper Elevation="15" Outlined=true Square=true Class="border-collapse">
    <MudItem>
        <MudStack Row=true>
            <MudStack>
                <ImageField @bind-Value=@Target.Avatar.URL Session=Session />
                <div class="color-picker">
                    <div class="color-preview" style="background-color:@Color" />
                    <MudColorPicker Label="Tag Color" @bind-Value=@Color Variant="Variant.Outlined" IconSize="Size.Small" Margin="Margin.Dense" />
                </div>
            </MudStack>
            <MudStack Style="width: 100%;">
                <MudChipSet OnClose="(i) => Target.CharacterTypes.Remove((eCharacterType)i.Value)" AllClosable=true >
                    @foreach(var label in Target.CharacterTypes)
                    {
                        <MudChip>@label</MudChip>
                    }
                </MudChipSet>
                <MudTextField Label="Description" @bind-Value=@Target.Description Variant="Variant.Outlined" DisableUnderLine=true Lines="4" />
            </MudStack>
        </MudStack>
    </MudItem>
</MudPaper>

@code {
    private MudColor Color
    {
        get
        {
            return string.IsNullOrEmpty(Target.Color) ? Meta.Name.GetDefaultColor() : new MudColor(Target.Color);
        }
        set
        {
            var defaultCol = Meta.Name.GetDefaultColor();
            if (defaultCol == value)
            {
                Target.Color = null;
            }
            else
            {
                Target.Color = value.ToString();
            }
        }
    }
}
