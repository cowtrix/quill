@using Squill.Data;
@using Squill.Services;
@inherits MudInput<string>
@inject GalleryService Gallery

<div class="img-button">
    @if (!string.IsNullOrEmpty(Value))
    {
        <DynamicImage Session="Session" Path="@Value" />
    }
    else
    {
        <MudIcon Icon="@Icons.Material.Filled.Image" />
    }
    <div class="img-actions fade-hover">
        <MudIconButton Size=Size.Small Icon="@Icons.Material.Filled.Add" OnClick="() => Gallery.OpenGallery(async (s) => await SetValueFromGallery(s))" />
        <div class="import-export">
            <MudIcon Icon="@Icons.Material.Filled.ImportExport" />
            <InputFile OnChange="OnFileUploaded" accept=".png" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ProjectSession Session { get; set; }

    public async Task OnFileUploaded(InputFileChangeEventArgs args)
    {
        var ms = new MemoryStream();
        await args.File.OpenReadStream(maxAllowedSize: 1024 * 1024 * 5)
            .CopyToAsync(ms);
        var bytes = ms.ToArray();
        Value = args.File.Name;
        await ValueChanged.InvokeAsync(Value);
        Gallery.SaveNewImage(Session, args.File.Name, bytes);
        StateHasChanged();
    }

    private async Task SetValueFromGallery(string path)
    {
        Value = path;
        await ValueChanged.InvokeAsync(Value);
    }

}
