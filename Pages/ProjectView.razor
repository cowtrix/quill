@page "/project/{Guid}"
@page "/project/{Guid}/{Element}"
@page "/project/"
@using Squill.Components
@using Squill.Components.Editors
@using Squill.Components.Layout
@using Squill.Data;
@using Squill.Services;
@using Squill.Data.Elements;

@inject ProjectService ProjectService
@inject NavigationManager NavManager
@inject UserService UserService
@inject TabService TabManager

<PageTitle>@GetPageTitle()</PageTitle>
<SqTabManager Session="Session" />
<GalleryWindow Session="Session" />

@if (UserService.CurrentUser == null)
{
    <div>Not logged in</div>
}
else if (!Session.IsSynchronized)
{
    <div>Synchronizing</div>
}
else
{
    <DiffDisplay Session="Session" />
    if (TabManager.Index == 0)
    {
        <ProjectExplorer Session=Session />
    }
    else
    {
        var element = Session.GetElement<IElement>(TabManager.CurrentTab.Target);
        if (element != null)
        {
            <EditorWrapper Session="Session" @ref=EditorWrapper Element="element">
                <ChildContent>
                    <CascadingValue Value="EditorWrapper">
                        @{
                            var t = Type.GetType(TabManager.CurrentTab.Target.Type);
                            switch (t.Name)
                            {
                                case nameof(Manuscript):
                                    <ManuscriptEditor />
                                    break;
                                case nameof(Chapter):
                                    <ChapterEditor />
                                    break;
                                case nameof(Character):
                                    <CharacterEditor />
                                    break;
                                case nameof(Timeline):
                                    <TimelineEditor />
                                    break;
                                case nameof(Location):
                                    <LocationEditor />
                                    break;
                            }
                        }
                    </CascadingValue>
                </ChildContent>
            </EditorWrapper>
        }
        else
        {
            <span class="sq-error">Failed to load element @TabManager.CurrentTab.Target.Name</span>
        }
    }

    @*<MudTabs >
            <ChildContent>
                @foreach (var tab in TabManager.Tabs)
                {
                    <MudTabPanel Text="@(!tab.IsEditing ? (tab.NameOverride ?? tab.Target.Name) : "")" Tag="@tab">
                        @{
                            if (tab.Target == null)
                            {
                                <ProjectExplorer Session=Session TabManager=TabManager />
                            }
                            else
                            {
                                <EditorWrapper Session="Session" @ref=EditorWrapper Element="Session.GetElement<IElement>(tab.Target)" TabManager="TabManager">
                                    <ChildContent>
                                        <CascadingValue Value="EditorWrapper">
                                            @{
                                                var t = Type.GetType(tab.Target.Type);
                                                switch (t.Name)
                                                {
                                                    case nameof(Manuscript):
                                                        <ManuscriptEditor />
                                                        break;
                                                    case nameof(Chapter):
                                                        <ChapterEditor />
                                                        break;
                                                    case nameof(Character):
                                                        <CharacterEditor />
                                                        break;
                                                    case nameof(Timeline):
                                                        <TimelineEditor />
                                                        break;
                                                    case nameof(Location):
                                                        <LocationEditor />
                                                        break;
                                                }
                                            }
                                        </CascadingValue>
                                    </ChildContent>
                                </EditorWrapper>
                            }
                        }
                    </MudTabPanel>
                }
            </ChildContent>
            <TabPanelHeader>
                @{
                    var tab = context.Tag as TabManager.TabView;
                    if (!tab.Sticky)
                    {
                        if (tab.IsEditing)
                        {
                            <MudStack Class="tab-rename" Row="true" Style="max-height: 2rem;">
                                <MudTextField  />
                                <MudIconButton Size=Size.Small Class="ml-2 pa-1" Icon="@Icons.Material.Filled.Check" OnClick="async (_) => await TabManager.FinishRename(context)" />
                            </MudStack>
                        }
                        else
                        {
                            <div class="fade-hover">
                                <MudTooltip>
                                    <ChildContent>
                                        <MudIconButton Class="ml-2" Icon="@Icons.Material.Filled.Edit" OnClick="(_) => TabManager.BeginRename(context)" Size="Size.Small" Variant="Variant.Outlined" />
                                    </ChildContent>
                                    <TooltipContent>Rename</TooltipContent>
                                </MudTooltip>
                                <MudTooltip>
                                    <ChildContent>
                                        <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Remove" OnClick="(_) => TabManager.RemoveTab(context)" Size="Size.Small" Variant="Variant.Outlined" />
                                    </ChildContent>
                                    <TooltipContent>Close Tab</TooltipContent>
                                </MudTooltip>
                            </div>
                        }
                    }
                }
            </TabPanelHeader>
        </MudTabs>*@
}

@code {
    [Parameter]
    public string Guid { get; set; }

    [Parameter]
    public string Element { get; set; }

    public ProjectSession Session { get; set; }

    private EditorWrapper EditorWrapper { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (System.Guid.TryParse(Guid, out var guid))
        {
            Session = await ProjectService.GetSession(guid);
        }
        if (!Session.IsSynchronized)
        {
            Session.TryStartSynchronize();
            Session.OnSynchronized += OnSynchronized;
        }

        TabManager.AddTab(null, "Elements", true);
        TabManager.OnTabAdded += FocusTab;
        TabManager.OnTabFocused += FocusTab;
        TabManager.OnTabRemoved += FocusTab;

        if (Element != null && System.Guid.TryParse(Element, out var elementGuid) &&
            !TabManager.Tabs.Any(t => t.Target?.Guid == elementGuid.ToString()))
        {
            TabManager.AddTab(Session.GetMetaData(elementGuid));
        }
    }

    private void FocusTab(object? sender, TabService.TabView tab)
    {
        if (tab != null && tab.Target != null && !tab.Closed)
        {
            Element = tab.Target.Guid.ToString();
            NavManager.NavigateTo($"/project/{Session.Project.Guid}/{tab.Target.Guid}");
        }
        else
        {
            NavManager.NavigateTo($"/project/{Session.Project.Guid}/");
        }
        InvokeAsync(StateHasChanged);
    }

    private void OnSynchronized(object? sender, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    private string GetPageTitle()
    {
        if (TabManager.CurrentTab?.Target != null)
        {
            return $"{Session.Project.Name} > {TabManager.CurrentTab.Target.Name}";
        }
        else
        {
            return Session.Project.Name;
        }
    }
}
