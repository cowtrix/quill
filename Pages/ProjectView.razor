@page "/project/{Guid}"
@page "/project/"
@using Squill.Components
@using Squill.Components.Editors
@using Squill.Data;
@using Squill.Services;

@inject ProjectService ProjectService

@if (!Session.IsSynchronized)
{
    <div>Synchronizing</div>
}
else
{
    <MudTabs @bind-ActivePanelIndex="TabManager.Index" Border="true" Outlined="true" PanelClass="px-4 py-6" ApplyEffectsToContainer="true">
        <ChildContent>
            @foreach (var tab in TabManager.Tabs)
            {
                <MudTabPanel Text="@(!tab.IsEditing ? (tab.NameOverride ?? tab.Target.Name) : "")" Tag="@tab">
                    @{
                        if (tab.Target == null)
                        {
                            <MudGrid Spacing="2" Justify="Justify.Center">
                                @foreach (var element in Session.ElementMeta)
                                {
                                    <ElementButton Element="element" OnClick="() => TabManager.AddTab(element)" />
                                }
                                <NewElementButton Session="Session" OnElementCreated="StateHasChanged" />
                            </MudGrid>
                        }
                        else
                        {
                            var t = Type.GetType(tab.Target.Type);
                            switch (t.Name)
                            {
                                case nameof(Manuscript):
                                    <ManuscriptEditor Element="@(Session.GetElement<Manuscript>(tab.Target))" Session="Session" TabManager="TabManager" />
                                    break;
                                case nameof(Chapter):
                                    <ChapterEditor Element="@(Session.GetElement<Chapter>(tab.Target))" Session="Session" TabManager="TabManager" />
                                    break;
                            }
                        }
                    }
                </MudTabPanel>
            }
        </ChildContent>
        <Header>
            <MudButtonGroup>
                <MudTooltip Text="Append a tab">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => TabManager.AddTab(null)" />
                </MudTooltip>
            </MudButtonGroup>
        </Header>
        <TabPanelHeader>
            @{
                var tab = context.Tag as TabManager.TabView;
                if (!tab.Sticky)
                {
                    if (tab.IsEditing)
                    {
                        <MudStack Class="tab-rename" Row="true" Style="max-height: 2rem;">
                            <MudTextField @bind-Value=tab.NameOverride Style="margin: 0;"/>
                            <MudIconButton Class="ml-2 pa-1" Icon="@Icons.Material.Filled.Check" OnClick="async (_) => await FinishRename(context)" />
                        </MudStack>
                    }
                    else
                    {
                        <MudIconButton Class="ml-2 pa-1" Icon="@Icons.Material.Filled.Edit" OnClick="(_) => BeginRename(context)" Size="Size.Small" />
                        <MudIconButton Class="ml-2 pa-1" Color="Color.Error" Icon="@Icons.Material.Filled.Remove" OnClick="(_) => TabManager.RemoveTab(context)" Size="Size.Small" />
                    }
                }
            }
        </TabPanelHeader>
    </MudTabs>
}

@code {
    [Parameter]
    public string Guid { get; set; }

    public ProjectSession Session { get; set; }

    public TabManager TabManager { get; set; } = new TabManager();

    protected override async Task OnInitializedAsync()
    {
        if (System.Guid.TryParse(Guid, out var guid))
        {
            Session = await ProjectService.GetSession(guid);
        }
        if (!Session.IsSynchronized)
        {
            Session.TryStartSynchronize();
            Session.OnSynchronized += OnSynchronized;
        }
        TabManager.AddTab(null, "Elements", true);
        TabManager.OnUpdated += (s, e) => InvokeAsync(StateHasChanged);
    }

    private void OnSynchronized(object? sender, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (TabManager.NextIndex.HasValue == true)
        {
            TabManager.Index = TabManager.NextIndex.Value;
            TabManager.NextIndex = null;
            StateHasChanged();
        }
    }

    private void BeginRename(MudTabPanel tab)
    {
        var tabView = tab.Tag as TabManager.TabView;
        tabView.IsEditing = true;
        tabView.NameOverride = tabView.Target.Name;
        StateHasChanged();
    }

    private async Task FinishRename(MudTabPanel tab)
    {
        var tabView = tab.Tag as TabManager.TabView;
        tabView.IsEditing = false;
        await Session.RenameElement(tabView.Target, tabView.NameOverride);
        StateHasChanged();
    }
}
